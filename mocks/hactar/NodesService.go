// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import hactar "github.com/NodeFactoryIo/hactar-daemon/internal/hactar"
import http "net/http"
import mock "github.com/stretchr/testify/mock"

// NodesService is an autogenerated mock type for the NodesService type
type NodesService struct {
	mock.Mock
}

// Add provides a mock function with given fields: node
func (_m *NodesService) Add(node hactar.Node) (*hactar.Node, *http.Response, error) {
	ret := _m.Called(node)

	var r0 *hactar.Node
	if rf, ok := ret.Get(0).(func(hactar.Node) *hactar.Node); ok {
		r0 = rf(node)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hactar.Node)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(hactar.Node) *http.Response); ok {
		r1 = rf(node)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(hactar.Node) error); ok {
		r2 = rf(node)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllNodes provides a mock function with given fields:
func (_m *NodesService) GetAllNodes() ([]hactar.NodeInfo, *http.Response, error) {
	ret := _m.Called()

	var r0 []hactar.NodeInfo
	if rf, ok := ret.Get(0).(func() []hactar.NodeInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]hactar.NodeInfo)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func() *http.Response); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SendBalanceReport provides a mock function with given fields: report
func (_m *NodesService) SendBalanceReport(report hactar.BalanceReport) (*http.Response, error) {
	ret := _m.Called(report)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(hactar.BalanceReport) *http.Response); ok {
		r0 = rf(report)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(hactar.BalanceReport) error); ok {
		r1 = rf(report)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendUptimeReport provides a mock function with given fields: report
func (_m *NodesService) SendUptimeReport(report hactar.UptimeReport) (*http.Response, error) {
	ret := _m.Called(report)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(hactar.UptimeReport) *http.Response); ok {
		r0 = rf(report)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(hactar.UptimeReport) error); ok {
		r1 = rf(report)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
