// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import lotus "github.com/NodeFactoryIo/hactar-daemon/internal/lotus"
import mock "github.com/stretchr/testify/mock"

// MinerService is an autogenerated mock type for the MinerService type
type MinerService struct {
	mock.Mock
}

// GetActor provides a mock function with given fields: miner, tipSetKey
func (_m *MinerService) GetActor(miner string, tipSetKey string) (*lotus.ActorResponse, error) {
	ret := _m.Called(miner, tipSetKey)

	var r0 *lotus.ActorResponse
	if rf, ok := ret.Get(0).(func(string, string) *lotus.ActorResponse); ok {
		r0 = rf(miner, tipSetKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lotus.ActorResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(miner, tipSetKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestActor provides a mock function with given fields: miner
func (_m *MinerService) GetLatestActor(miner string) (*lotus.ActorResponse, error) {
	ret := _m.Called(miner)

	var r0 *lotus.ActorResponse
	if rf, ok := ret.Get(0).(func(string) *lotus.ActorResponse); ok {
		r0 = rf(miner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lotus.ActorResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(miner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMinerAddress provides a mock function with given fields:
func (_m *MinerService) GetMinerAddress() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMinerPower provides a mock function with given fields: miner
func (_m *MinerService) GetMinerPower(miner string) (*lotus.MinerPowerResponse, error) {
	ret := _m.Called(miner)

	var r0 *lotus.MinerPowerResponse
	if rf, ok := ret.Get(0).(func(string) *lotus.MinerPowerResponse); ok {
		r0 = rf(miner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lotus.MinerPowerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(miner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
